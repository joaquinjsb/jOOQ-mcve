package org.jooq.mcve.test.java.oracle;

import org.jooq.DSLContext;
import org.jooq.Name;
import org.jooq.SQLDialect;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.mcve.java.oracle.tables.records.TestRecord;
import org.jooq.tools.JooqLogger;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.testcontainers.containers.OracleContainer;
import org.testcontainers.containers.wait.strategy.HostPortWaitStrategy;
import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;
import org.testcontainers.containers.wait.strategy.WaitAllStrategy;
import org.testcontainers.utility.DockerImageName;
import org.testcontainers.utility.ResourceReaper;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.Duration;

import static org.jooq.mcve.java.oracle.Tables.TEST;
import static org.jooq.mcve.java.oracle.Tables.TEST_2;
import static org.jooq.mcve.java.oracle.Tables.TEST_3;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class JavaTest {

    static JooqLogger log = JooqLogger.getLogger(JavaTest.class);
    static OracleContainer db;
    static Connection connection;
    static DSLContext ctx;

    @BeforeClass
    public static void init() throws SQLException {
        if (System.getProperty("jooq.codegen.jdbc.url") == null) {
            db = new OracleContainer(DockerImageName.parse("gvenzl/oracle-xe:11-faststart").asCompatibleSubstituteFor("gvenzl/oracle-xe:11-faststart")) {
                @Override
                public String getSid() {
                    return "XE";
                }

                ;

                @Override
                public String getDatabaseName() {
                    return "XE";
                }

                ;
            }
                    .withUsername("MCVE")
                    .withPassword("MCVE")
                    .withEnv("ORACLE_PASSWORD", "MCVE")
                    .withEnv("APP_USER", "MCVE")
                    .withEnv("APP_USER_PASSWORD", "MCVE")
                    .waitingFor(new WaitAllStrategy()
                            .withStrategy(new LogMessageWaitStrategy()
                                    .withRegEx(".*DATABASE IS READY TO USE!.*"))
                            .withStrategy(new HostPortWaitStrategy())
                            .withStartupTimeout(Duration.ofMinutes(5))
                    )
                    .withInitScript("db/migration/init.sql");
            db.start();
            System.setProperty("jooq.codegen.jdbc.url", db.getJdbcUrl());
            System.setProperty("jooq.codegen.jdbc.username", db.getUsername());
            System.setProperty("jooq.codegen.jdbc.password", db.getPassword());
        }

        log.info("Connecting");
        connection = DriverManager.getConnection(
                System.getProperty("jooq.codegen.jdbc.url"),
                System.getProperty("jooq.codegen.jdbc.username"),
                System.getProperty("jooq.codegen.jdbc.password")
        );

        ctx = DSL.using(connection, SQLDialect.ORACLE11G);

        // Use JDBC directly instead of jOOQ to avoid DEBUG logging all of this
        try (Statement s = connection.createStatement()) {
            log.info("Finished setup");
        }
    }

    @AfterClass
    public static void end() {
        if (db != null) {
            ResourceReaper.instance().stopAndRemoveContainer(db.getContainerId(), db.getDockerImageName());
        }
    }

    @Before
    public void setup() throws Exception {
        ctx.delete(TEST).execute();
    }

    @After
    public void after() throws Exception {
    }

    @Test
    public void mcveTest() {
        final Name sequenceName = DSL.name("test_seq");
        ctx.createSequence(sequenceName).incrementBy(1).startWith(1).execute();
        assertEquals(1,
                ctx.insertInto(TEST)
                        .set(TEST.ID, DSL.sequence(sequenceName, SQLDataType.INTEGER).nextval())
                        .set(TEST.CD, 42)
                        .execute()
        );

        ctx.insertInto(TEST_2)
                .set(TEST_2.ID, DSL.sequence(sequenceName, SQLDataType.INTEGER).nextval())
                .set(TEST_2.TEST_ID, 1)
                .execute();

        ctx.insertInto(TEST_3)
                .set(TEST_3.ID, DSL.sequence(sequenceName, SQLDataType.INTEGER).nextval())
                .set(TEST_3.TEST_2_ID, 2)
                .execute();

        ctx.select(TEST.ID, TEST.CD, DSL.row(TEST.test_2().ID, TEST.test_2().TEST_ID, DSL.row(TEST.test_2().test_3().ID, TEST.test_2().test_3().TEST_2_ID.as("parent_id"))))
                .from(TEST)
                .join(TEST.test_2())
                .join(TEST.test_2().test_3())
                .orderBy(TEST.ID)
                .limit(0, 10)
                .fetch()
                .forEach(r -> log.info(r.toString()));

        TestRecord record = ctx.fetchOne(TEST, TEST.CD.eq(42));
        assertNotNull(record.getId());
    }
}
