/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.oracle;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.QOM.ForeignKeyRule;
import org.jooq.mcve.java.oracle.tables.Test;
import org.jooq.mcve.java.oracle.tables.Test_2;
import org.jooq.mcve.java.oracle.tables.Test_3;
import org.jooq.mcve.java.oracle.tables.records.TestRecord;
import org.jooq.mcve.java.oracle.tables.records.Test_2Record;
import org.jooq.mcve.java.oracle.tables.records.Test_3Record;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * MCVE.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<TestRecord> PK_TEST = Internal.createUniqueKey(Test.TEST, DSL.name("PK_TEST"), new TableField[] { Test.TEST.ID }, true);
    public static final UniqueKey<Test_2Record> TEST_2_PK_TEST = Internal.createUniqueKey(Test_2.TEST_2, DSL.name("TEST_2_PK_TEST"), new TableField[] { Test_2.TEST_2.ID }, true);
    public static final UniqueKey<Test_3Record> TEST_3_PK_TEST = Internal.createUniqueKey(Test_3.TEST_3, DSL.name("TEST_3_PK_TEST"), new TableField[] { Test_3.TEST_3.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<Test_2Record, TestRecord> TEST_2__TEST_FK = Internal.createForeignKey(Test_2.TEST_2, DSL.name("TEST_2__TEST_FK"), new TableField[] { Test_2.TEST_2.TEST_ID }, Keys.PK_TEST, new TableField[] { Test.TEST.ID }, true, ForeignKeyRule.NO_ACTION, null);
    public static final ForeignKey<Test_3Record, Test_2Record> TEST_3__TEST_2_FK = Internal.createForeignKey(Test_3.TEST_3, DSL.name("TEST_3__TEST_2_FK"), new TableField[] { Test_3.TEST_3.TEST_2_ID }, Keys.TEST_2_PK_TEST, new TableField[] { Test_2.TEST_2.ID }, true, ForeignKeyRule.NO_ACTION, null);
}
