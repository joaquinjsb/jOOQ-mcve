/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.oracle.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.oracle.Keys;
import org.jooq.mcve.java.oracle.Mcve;
import org.jooq.mcve.java.oracle.tables.Test.TestPath;
import org.jooq.mcve.java.oracle.tables.Test_3.Test_3Path;
import org.jooq.mcve.java.oracle.tables.records.Test_2Record;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Test_2 extends TableImpl<Test_2Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MCVE.TEST_2</code>
     */
    public static final Test_2 TEST_2 = new Test_2();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Test_2Record> getRecordType() {
        return Test_2Record.class;
    }

    /**
     * The column <code>MCVE.TEST_2.ID</code>.
     */
    public final TableField<Test_2Record, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>MCVE.TEST_2.TEST_ID</code>.
     */
    public final TableField<Test_2Record, Integer> TEST_ID = createField(DSL.name("TEST_ID"), SQLDataType.INTEGER, this, "");

    private Test_2(Name alias, Table<Test_2Record> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Test_2(Name alias, Table<Test_2Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>MCVE.TEST_2</code> table reference
     */
    public Test_2(String alias) {
        this(DSL.name(alias), TEST_2);
    }

    /**
     * Create an aliased <code>MCVE.TEST_2</code> table reference
     */
    public Test_2(Name alias) {
        this(alias, TEST_2);
    }

    /**
     * Create a <code>MCVE.TEST_2</code> table reference
     */
    public Test_2() {
        this(DSL.name("TEST_2"), null);
    }

    public <O extends Record> Test_2(Table<O> path, ForeignKey<O, Test_2Record> childPath, InverseForeignKey<O, Test_2Record> parentPath) {
        super(path, childPath, parentPath, TEST_2);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class Test_2Path extends Test_2 implements Path<Test_2Record> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> Test_2Path(Table<O> path, ForeignKey<O, Test_2Record> childPath, InverseForeignKey<O, Test_2Record> parentPath) {
            super(path, childPath, parentPath);
        }
        private Test_2Path(Name alias, Table<Test_2Record> aliased) {
            super(alias, aliased);
        }

        @Override
        public Test_2Path as(String alias) {
            return new Test_2Path(DSL.name(alias), this);
        }

        @Override
        public Test_2Path as(Name alias) {
            return new Test_2Path(alias, this);
        }

        @Override
        public Test_2Path as(Table<?> alias) {
            return new Test_2Path(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mcve.MCVE;
    }

    @Override
    public UniqueKey<Test_2Record> getPrimaryKey() {
        return Keys.TEST_2_PK_TEST;
    }

    @Override
    public List<ForeignKey<Test_2Record, ?>> getReferences() {
        return Arrays.asList(Keys.TEST_2__TEST_FK);
    }

    private transient TestPath _test;

    /**
     * Get the implicit join path to the <code>MCVE.TEST</code> table.
     */
    public TestPath test() {
        if (_test == null)
            _test = new TestPath(this, Keys.TEST_2__TEST_FK, null);

        return _test;
    }

    private transient Test_3Path _test_3;

    /**
     * Get the implicit to-many join path to the <code>MCVE.TEST_3</code> table
     */
    public Test_3Path test_3() {
        if (_test_3 == null)
            _test_3 = new Test_3Path(this, null, Keys.TEST_3__TEST_2_FK.getInverseKey());

        return _test_3;
    }

    @Override
    public List<Check<Test_2Record>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("SYS_C006990"), "\"ID\" IS NOT NULL", true),
            Internal.createCheck(this, DSL.name("TEST_2_ID_TEST"), "id IS NOT NULL", true)
        );
    }

    @Override
    public Test_2 as(String alias) {
        return new Test_2(DSL.name(alias), this);
    }

    @Override
    public Test_2 as(Name alias) {
        return new Test_2(alias, this);
    }

    @Override
    public Test_2 as(Table<?> alias) {
        return new Test_2(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Test_2 rename(String name) {
        return new Test_2(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Test_2 rename(Name name) {
        return new Test_2(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Test_2 rename(Table<?> name) {
        return new Test_2(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Test_2 where(Condition condition) {
        return new Test_2(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Test_2 where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Test_2 where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Test_2 where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Test_2 where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Test_2 where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Test_2 where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Test_2 where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Test_2 whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Test_2 whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
